what is bean?
java bean is have 3 condition 
1/implement serializable 
2/private method with getter and setter. 
3/add no arugment constructor.

why bean is used?
it is a reusable software component. A bean encapsulates many objects into one object so that we can access this object from multiple places. Moreover, it provides easy maintenance.


find the 2nd highest salary from query
//https://www.youtube.com/watch?v=a3ngELoA9h0
1/MAX
2/LIMIT
3/TOP

1/MAX
select max(salary) from employee where salary < (select max(salary) from employee)

2/LIMIT
select salary from (select salary from employee ORDER BY salary DESC limit 2) ORDER BY salary limit 1.

3/TOP
select TOP salary from(select TOP 2 salary from employee ORDER BY salary DESC) ORDER BY salary ASC.

why singletone is used?

A singleton should be used when managing access to a resource which is shared by the entire application, and it would be destructive to potentially have multiple instances of the same class. Making sure that access to shared resources thread safe is one very good example of where this kind of pattern can be vital.

Managing a connection (or a pool of connections) to a database.

I would use it also to retrieve and store informations on external configuration files.


When using Singletons, you should make sure that you're not accidentally concealing dependencies. Ideally, the singletons (like most static variables in an application) be set up during the execution of your initialization code for the application (static void Main() for C# executables, static void main() for java executables) and then passed in to all other classes that are instantiated which require it. This helps you maintain testability.

class Abc{
 static Abc obj=new Abc();

private Abc{}

public static Abc getInstance(){

return obj;
} 

}

public class Singleton{
public static void main(String[] args){
Abc obj=Abc.getInstance();
}
}

Lambda Expression in java

A lambda expression is a short block of code which takes in parameters and returns a value.
 Lambda expressions are similar to methods, 
but they do not need a name and they can be implemented right in the body of a method.
import java.util.*;
import java.lang.*;
import java.io.*;

interface A{
	void show(int i);
}
// class xyz implements A{
// 	public void show(){
// 		System.out.println("hello");
// 	}
// }
class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		A obj;
		obj = i->System.out.println("hello "+ i);
		obj.show(6);
	}
} 

Main purposes of Java Lambda expressions are as follows:

Functional Programming: We use Lambda expressions to pass Code as Data. We can pass a function as an argument to another function in Java. This increases the power of our program.

JPA vs Hibernate
//https://www.geeksforgeeks.org/java-jpa-vs-hibernate/

JPA is only a specification, it is not an implementation.
It is a set of rules and guidelines to set interfaces for implementing object-relational mapping, .
It needs a few classes and interfaces.
It supports simple, cleaner, and assimilated object-relational mapping.
It supports polymorphism and inheritance.
Dynamic and named queries can be included in JPA.

Hibernate is an implementation of JPA guidelines.
It helps in mapping Java data types to SQL data types.
It is the contributor of JPA.


Array vs ArrayList
An array is a dynamically-created object. It serves as a container that holds the constant number of values of the same type.
In Java, ArrayList is a class of Collections framework. It implements List<E>, Collection<E>, Iterable<E>, Cloneable, Serializable, and RandomAccess interfaces.
