1/What should be the output of the following program?
const customerRide = [
 {
 riderId: "XC1452",
 walletBalance: 58960,
 totalDistanceInKm: 5.658,
 dateOfTravel: new Date("02-02-2023"),
 },
];
customerRide[-1] = {
 riderId: "XC1451",
 walletBalance: 8569,
 totalDistanceInKm: 14785,
 dateOfTravel: new Date("03-02-2023"),
};
customerRide[1] = {
 riderId: "XC145158",
 walletBalance: 78512,
 totalDistanceInKm: 6931,
 dateOfTravel: new Date("04-02-2023"),
};
function printCustomerRides() {
 let distance = 0;
 for (let index = 0; index < customerRide.length; index++) {
 distance += customerRide[index].totalDistanceInKm;
 }
 console.log(`The distance travelled by all customers is ${distance}`);
 distance = 0;
 for (let value of customerRide) {
 distance += value.totalDistanceInKm;
 }
 console.log(`The distance travelled by all customers is ${distance}`);
}
const bindedCustomerRides = printCustomerRides.bind(customerRide);
bindedCustomerRides();


2/You are working on an enterprise project for a bank. You have been assigned to the Customer Account module that deals with managing the bank accounts of customers. The API contract to send customer details allows fields such as accountNumber, customerId,
currentBalance, addressLine1, addressLine2, and contactNumber. However, in the frontend, while you were creating the request body you encountered an additional key which is
important to maintain the state on the frontend. You need to make a decision to identify the
best way to remove the extra field by replacing ?? to create a request body for the API.
let bankAccount = {
 accountNumber: "A458962361",
 customerId: "A1056932036",
 currentBalance: "5896036",
 isSelected: true,
 addressLine1: "Parkway Avenue",
 addressLine2: "United States",
 contactNumber: 90112569145,
};
function sendToApi() {
 fetch("http://example.com/")
 .then((response) => response.json())
 .then((data) => console.log(data));
}
??
sendToApi(newObj
const { isSelected:
_, newObj } =
bankAccount;
A
const { isSelected:
_, { ...newObj }} =
bankAccount ;
B
const newObj =
bankAccount;
delete
newObj.isSelected;
C
There's no need to
remove the
additional field
since deleting a
key
"isSelected" will
hamper the state
on the frontend
and the backend
will be able to
ignore the
additional key even
if we send it in the
request body.
D
const { isSelected:
_, ...newObj } =
bankAccount;
E

3/You are working on an enterprise project for a bank. You have been assigned with Account
Type module that deals with managing account types of customers. Account types can be Normal, Gold or Prefered. Which of the following is the most appropriate for this code block
that you wrote in JavaScript?
class BankAccount {
 static changeAccountType(accountType) {
 this.newAccountType = accountType;
 return this.newAccountType;
 }
 constructor({ newAccountType = "Normal" } = {}) {
 this.newAccountType = newAccountType;
 }
}
const customer = new BankAccount({ newAccountType: "Gold" });
console.log(customer.changeAccountType("Prefered"));
There is no
compile time error
in the program and
it changes the
account type and
prints "Prefered" in
the console.
A
There is a compile
time error in the
program and it can
be resolved by
removing the static
keyword from the
changeAccount
function.
B
There is a compile
time error in the
program and it can
be resolved by
invoking the
changeAccountTyp
e function as
customer.__proto_
_.changeAccountT
ype("Prefered");
C
There is a runtime
exception in the
program and it can
be resolved by
removing the static
keyword from the
changeAccount
function.
D
There is a runtime
exception in the
program and it can
be resolved by
invoking the
changeAccountTyp
E

4/Why is checking for null a good practice?
Checking for null
prevents the use of
an object before
it's initialized.
A
Checking for null
prevents errors
resulting in NaN. B
Null check is not
required in ES-9
since it is handled
by the JavaScript
compiler out of the
box.
C
Checking for null
prevents the need
to throw custom
errors.
D
None of the
options are
correct. E

5/How would you replace the lines with ?? to ensure that the error thrown from the try block of
the server method is preserved along with the method name? Choose the best possible
option.
const billDetails = [
 {
 billId: "OP908",
 billAmount: 58960,
 billDiscount: 5,
 date: new Date("02-02-2023"),
 },
 {
 billId: "OP876",
 billAmount: 7813,
 billDiscount: 2.5,
 date: new Date("03-02-2023"),
 },
 {
 billId: "OP908",
 billAmount: 0,
 billDiscount: 0,
 date: new Date("09-02-2023"),
 },
];
function server(index) {
 try {
 billDetails[index].billDiscount;
 } catch (error) {
 ??
 }
}
function getPerItemCostByCustomerId(id) {
 try {
 server(3);
 } catch (exception) {
 ??
 }
}
getPerItemCostByCustomerId(2);
Replace the 1st ??
with
throw new
Error("Method
: Server", {
reason:
error,
});
Replace the 2nd
?? with
console.log(`
${exception.m
essage}
${exception.r
eason}`);
A
Replace the 1st ??
with
throw new
Error("Method
: Server", {
customMessge:
error,
});
Replace the 2nd
?? with
console.log(`
${exception.m
essage}
${exception.c
ustomMessge}`
);
B
Replace the 1st ??
with
throw new
Error("Method
: Server", {
cause:
error,
});
Replace the 2nd
?? with
console.log(`
${exception.m
essage}
${exception.c
ause}`);
C
Replace the 1st ??
with
throw new
Error("Method
: Server", {
error,
});
Replace the 2nd
?? with

6/Which of the following is true about throttling and debouncing in JavaScript?
1. Debouncing
delays the
function
invocation
by a specific
period of
time to avoid
unnecessary
invocations
which may
impact the
performance
of the
application.
2. Throttling
performs
function
invocation at
specific
intervals to
the copy of
the function
as long as
the event
trigger is
active.
A
1. Throttling
delays the
function
invocation
by a specific
period of
time to avoid
unnecessary
invocations
which may
impact the
performance
of the
application.
2. Debouncing
performs
function
invocation at
specific
intervals as
long as the
event trigger
is active.
B

7/What should be the output of the following program and how would you ensure that you get
the right results?
const bank = {
 customer: {
 currentBalance: 1000,
 deductCharges(charges, customerType) {
 if (customerType === "Gold") {
 return this.currentBalance - (charges - (charges * 10) / 100);
 } else if (customerType === "Preferred") {
 return this.currentBalance - (charges - (charges * 5) / 100);
 } else {
 return this.currentBalance - charges;
 }
 },
 addQuaterlyInterest: (customerType) => {
 if (customerType === "Gold") {
 return this.currentBalance + (this.currentBalance * 3.5) / 100;
 } else if (customerType === "Preferred") {
 return this.currentBalance + (this.currentBalance * 2.5) / 100;
 } else {
 return this.currentBalance + (this.currentBalance * 1.5) / 100;
 }
 },
 },
};
console.log(bank.customer.deductCharges(25, "Preferred"));
console.log(bank.customer.addQuaterlyInterest("Gold"));
Current Output
976.25
NaN
Change the
addQuaterlyInteres
t to the normal
function
A
Current Output:
NaN
1035
Change the
deductCharges to
an arrow function
B
Current Output
976.25
1035
The code works
perfectly fine and
there's no need to
change it
C
NaN
NaN
Change the call to
addQuaterlyInteres
t
as bank.customer.
addQuaterlyInteres
t.call(bank.custom
er, "Gold")
D
NaN
NaN
Change the call to
addQuaterlyInteres
t
as bank.customer.
addQuaterlyInteres
t.bind(bank.custom
er, "Gold")
E

8/You are the backend developer for an enterprise bank project. Within this, you are assigned
the task to sort the bank accounts by their balances. However, during the program execution
flow you want to ensure that the code does not modify the customer details. You tried Object.freeze but it is not throwing an error when a developer is modifying the bank account
details such as balance. What is missing here?
const bankAccount = [
 {
 customerId: "A10120123",
 accountNumber: "502362145",
 balance: 5000,
 addressLine1: "Parkway Avenue",
 addressLine2: "United States",
 },
 {
 customerId: "A101201231",
 accountNumber: "5023621451",
 balance: 10000,
 addressLine1: "CA Avenue",
 addressLine2: "United States",
 },
];
for (let index = 0; index < bankAccount.length; index++) {
 Object.freeze(bankAccount[index]);
}
bankAccount[1].balance = 200;
console.log(bankAccount[1].balance);
Objects which are
frozen inside the
array will never
throw an error if
modified because
the freeze function
does not return a
new object rather it
freezes the object
at the same
reference.
A
The V8 engine
used by the
browser and
NodeJS is different
hence if the same
code is executed in
a browser runtime
it will throw an
error. It is not
throwing an error
right now because
it is executed in
NodeJS runtime.
B
"use strict" should
be added at the
top of the file to
ensure that an
error is thrown
whenever the
developer tries to
reassign a value to
a frozen object.
C
The freeze method
freezes the object
but does not throw
an error, rather
freezeWithError
should be used to
ensure that an
error is thrown
when a frozen
object is being
modified.
D
9/You are reviewing the code of a banking project. What will be your opinion on the following
block of code?
function calculateInterest(currentBalance, customerAge) {
 try {
 if (customerAge > 150) {
 throw new Error();
 }
 if (currentBalance > 0) {
 let interest = (currentBalance * 2.5) / 100;
 if (customerAge > 60) {
 interest += 50;
 }
 return interest;
 }
 throw new Error();
 } catch {
 console.error(
 "Interest cannot be calculated on zero balance or the age cannot
be greater than 150"
 );
 }
}
calculateInterest(0, 60);
The program will
print "Interest
cannot be
calculated on zero
balance or the age
cannot be greater
than 150".
A
There's a compile
time error as the
catch should have
parameters.
B
There's a compiletime error and it
can be resolved by
replacing catch
with catch()
C
There's a run time
error and it can be
corrected by
replacing catch
with catch(e)
D
There's a compiletime error and it
can be resolved by
replacing catch
with catch(e)
E

10/Which operator and array functions would you use to complete the method of deleting
customers by id? You can assume that all the customers have a unique id that can be a string
or a number. The code should delete the customer by using case-sensitive id matching.
Select the correct operator and array functions to replace ?? in the code block.
function deleteCustomerById(customers, value) {
 var index = customers.??((customer) => customer.id ?? value);
 if (index > -1) {
 customers.??(index, 1);
 }
 return customers;
}
const customers = [
 { id: 1, name: "Jhon" },
 { id: "2", name: "Jack" },
 { id: 2, name: "Jim" },
 { id: 3, name: "Jhonny" },
 { id: '3', name: "Julia" },
];
deleteCustomerById(customers,'3');
find, ===, splice A
findIndex, ==,
splice B
findIndex, ===,
slice C
findIndex, ===,
splice D
find, ===, slice E

11/How do you describe the proper error handling using try . . . catch . . . finally blocks?
Proper error
handling allows
code processing to
continue and to
provide
appropriate user
feedback.
A
Proper error
handling allows
users to fix
problems with the
webpage.
B
Proper error
handling allows
you to debug the
application at run
time.
C
None of the above D
Proper error
handling allows
you to suppress all
the bugs in your
scripts.
E

12/You are working on an enterprise project for a ride-sharing application. You have been
assigned to the Customer Ride module that deals with managing customer payments for
rides. Which of the following option is correct for the following code block?
const customerRide = {
 riderId: "XC1452",
 walletBalance: 58960,
 totalDistanceInKm: 5.658,
 dateOfTravel: new Date("02-02-2023"),
 lastTravelledOn: undefined,
 previousDues: Infinity,
 uniqueRegex: /.*/,
};
function calculateFare() {
 const clone = JSON.parse(JSON.stringify(this));
 clone.walletBalance -= 5.5;
 console.log(
 `The rider traveled on date ${clone.dateOfTravel} and has wallet
balance of ${clone.walletBalance} and has last traveled on
${clone.lastTravelledOn}`
 );
}
const bindedCalculateFare = calculateFare.bind(customerRide);
bindedCalculateFare();

13/You are getting sensor readings from a temperature sensor in degree celsius and you need to
convert them to Fahrenheit. How would you parse those readings in JS replacing ?? so that
the line below it will be able to convert those values to Fahrenheit?
Assumption: Fahrenheit = Temperature in degree celsius * 2;
const sensorReading = [1, 2, 3, [null, 5, [4, 10], 89, "20", , [[[[,
"96"]]]]]];
function convert() {
 ??
 const mapped = flatArray.map((temperature) => temperature * 2);
 console.log(mapped);
}
convert();
const flatArray =
sensorReading.flat
(3);
A
Write a custom
array flattening
function using
recursion because
the flattening
function in
JavaScript does
not support sparse
arrays. And use it
as `const flatArray
=
customArrayFflatte
ning(sensorReadin
g);`
B
const flatArray =
sensorReading.flat
(5);
C
const flatArray =
sensorReading.flat
();
D
const flatArray =
sensorReading.flat
tenArray(5);
E

14/For one of the Bank's enterprise projects, the tech lead has asked you to secure/optimize the
JavaScript files by hiding the actual names of variables and functions, making it tough to
reverse engineer the functions and reducing code size. Which of the following approach would you choose?
Code obfuscation A
Code minification B
Code Obfuscation
and Minification C
Code encryption D
Code Obfuscation
and Encryption E