1/arrow function in typescript

const result=(a:number,b:number):number=>{return a+b}
const result=(a:number,b:number):number=>a+b;//arrow function with implecite return;
console.log(result(2,5))

2/arrow function vs normal function

Unlike regular functions, arrow functions do not have their own this.
For example:-

et user = {
    name: "GFG",
    gfg1:() => {
        console.log("hello " + this.name); // no 'this' binding here
    },
    gfg2(){       
        console.log("Welcome to " + this.name); // 'this' binding works here
    }  
 };
user.gfg1();
user.gfg2();

Arguments objects are not available in arrow functions, but are available in regular functions.

let user = {      
    show(){
        console.log(arguments);//possible
    }
};
user.show(1, 2, 3);

let user = {     
        show_ar : () => {
        console.log(...arguments);//not possible
    }
};
user.show_ar(1, 2, 3);

Regular functions created using function declarations or expressions are ‘constructible’ and ‘callable’. Since regular functions are constructible, they can be called using the ‘new’ keyword. However, the arrow functions are only ‘callable’ and not constructible. Thus, we will get a run-time error on trying to construct a non-constructible arrow functions using the new keyword.
let x = function(){
    console.log(arguments);//get success
};
new x =(1,2,3);

et x = ()=> {
    console.log(arguments);//error
};
new x(1,2,3);


3/infinate value pass as a function argument
let x = function(...arg:number[]){
    arg.forEach(value=>{
        console.log(value);
    })
};
x(1,5,7,10,11,40);

CREATE extra environment file
step #1:we will create an interface class for envirnment to define the keys.
step #2:we will then have to pass the values for each environment file.
step #3:we will have to include the details in our configurations in angular.json
make changes under "build->configuration" and under "serve->configuration"
we have to map each environment configuration seperately.
step #4:we can pass the configuration useing the command 
ng serve -configuration=developer.


how interceptor work?
one service class implements httpInterceptor and intercept method take 2 parameter req,next.

export class InterceptorService implements HttpInterceptor {
  token: string;
  constructor(private facadeService: FacadeService) { }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {

    this.token = this.facadeService.getUserToken();
    if (this.token) {
      const tokenizedReq = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + this.token) });
      return next.handle(tokenizedReq);
    }
    return next.handle(req);
  }
}

in the app module 

providers: [
 {
  provide: HTTP_INTERCEPTORS,
  useClass: InterceptorService,
  multi: true
 }
]

High-level Differences between Template-driven and Reactive Forms
Below are some of the high-level differences between the two types:

Template-driven forms make use of the "FormsModule", while reactive forms are based on "ReactiveFormsModule".
Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.
In a template-driven approach, most of the logic is driven from the template, whereas in reactive-driven approach, the logic resides mainly in the component or typescript code. Let us get started by generating a component and then we'll update our form code.
What is observer and observable? 
Observable is a stream of events or data. They are often returned from Angular methods, such as the http.get and the myinputBox.valueChanges.
Subscribing "kicks off" the observable stream. Without a subscribe (or an async pipe) the stream won't start emitting values.

Observable is like a youtube channel of someone else. 
(( It uploads new videos(data) from time to time, so it is a data source for you))

Your youtube account is an Observer

Your youtube account (Observer) can only get notifications about whether someone else's youtube channel (Observable) has uploaded a new video (has new data) or made a livestream (new event) only if you have subscribed to that channel
Why promise??? 

Promises give us the ability to write cleaner code but reducing (or entirely removing) call-back hell.

In addition, callbacks are the backbone of some new syntax features coming in ES2017, such as async functions, which allows an even cleaner way of writing code.

The third thing that promises do is not immediately apparent when you first learn the syntax -- automatic error handling. Promises allow errors to be passed down
 the chain and handled in one common place without having to put in layers of manual error handling.
 
 Es6 feature
The let keyword
The const keyword
Arrow Functions
Classes
Promises
The For/Of Loop

why promise is used???

 One of the arguments for using promises is getting rid of the so-called "callback hell", which looks something like this:
 setTimeout(function () {
    setTimeout(function() {
        setTimeout(function() {
            // do something
        }); 
    }); 
});
simply using promises alone will also not prevent that, like in the following sample:
samplePromise().then(function () {
    samplePromise().then(function () {
        samplePromise().then( function () {
            // do something
        });
    });
});
That being said, there's one use case that might arguably benefit from a promise, 
and that is when exceptions from more than one asynchronous call could be caught by the same catch block:
new Promise(function (resolve, reject) {
    resolve("Blah");
}).then(function () {
    // do something
}).then(function () {
    // do something
}).catch(function (reason) {
    // error handling
});

generics type in typescript
function getvalue <Type> (args:Type):Type{
    return args;
}
let value:number=getvalue<number>(6)
console.log('value is :',value);


different between 4 subject
Subject - No initial value or replay behavior.
AsyncSubject - Emits latest value to observers upon completion.
BehaviorSubject - Requires an initial value and emits its current value (last emitted item) to new subscribers.
ReplaySubject - Emits specified number of last emitted values (a replay) to new subscribers



let and var value change in for loop

for(var i=0;i<3;i++){
setTimeout(()=>console.log(i));
}
i==0;
queue te setTimeout ta theke gelo
i=1,2,3

i=3,
i=3,
i=3;

for(let i=0;i<3;i++){

}

before start anything i create a new block scope

{//overAll block scope

i=0;

{//scope 1

   let i;
///copy from global scope
   i=0;
if(i<3){
setTimeout(()=>console.log(i));
}

}

{//scope 2

let i;
//copy from last scope 
i=0;
i++;

if(i<3){
setTimeout(()=>console.log(i));
}
}

}

///lifeCycle hook

ngOnchanges():when a input chage is detected or when parent child data value is changes .
It's take a SimpleChange object which optain current and previous change.

ngOnInit():It's call when a this class is create,when page is ready to view.It's call only one time.
 it Is a life cycle hook called by Angular to indicate that Angular is done creating the component.
It is use when you want to show some data after page render.

ngDoCheck():This hook can be interpreted as an “extension” of ngOnChanges. 
You can use this method to detect changes that Angular can’t or won’t detect.
It is called in every change detection, immediately after the ngOnChanges and ngOnInit hooks.

ngAfterContentInit():It is call when our content is initialized.It's call only one time.
It's call when after ngDoCheck().

ngAfterContentChecked():It's is call when a ngContent value is change. 
ngContent is when a component is nedd a component again again and you need to
chage e value also.That time ngContent is used.

ngAfterViewInit():Respond after Angular initializes the component's views 
and child views, or the view that contains the directive.It's call only one time.

ngAfterViewChecked():It's call when a view of the component is change.
call every time when the view is change.

ngOnDestroy():Cleanup just before Angular destroys the directive or component. 
Unsubscribe Observables to avoid memory leaks. 

why viewChild is used:viewChild is a decorator used for manipulate/update
 child component and use for get /update any DOM element;
 
 
 What is the difference between Observable and a Subject in rxjs?
 
 Observables are unicast by design and Subjects are multicast by design.

if you look at the below example - each subscription receives the different values as observables developed as unicast by design.
import {Observable} from 'rxjs';

let obs = Observable.create(observer=>{
   observer.next(Math.random());
})

obs.subscribe(res=>{
  console.log('subscription a :', res); //subscription a :0.2859800202682865
});

obs.subscribe(res=>{
  console.log('subscription b :', res); //subscription b :0.694302021731573
});

this could be weird if you are expecting the same values on both the subscription.

we can overcome this issue using Subjects. Subjects is similar to event-emitter and
it does not invoke for each subscription. consider the below example
import {Subject} from 'rxjs';

let obs = new Subject();

obs.subscribe(res=>{
  console.log('subscription a :', res); // subscription a : 0.91767565496093
});

obs.subscribe(res=>{
  console.log('subscription b :', res);// subscription b : 0.91767565496093
});

obs.next(Math.random());

both the subscription are got the same output value!.



JIT VS AOT
JIT - Compile TypeScript just in time for executing it.

    Compiled in the browser.
    Each file compiled separately.
    No need to build after changing your code and before reloading the browser page.
    Suitable for local development.

AOT - Compile TypeScript during build phase.

    Compiled by the machine itself, via the command line (Faster).
    All code compiled together, inlining HTML/CSS in the scripts.
    No need to deploy the compiler (Half of Angular size).
    More secure, original source not disclosed.
    Suitable for production builds.

**JIT (Just-In-Time) Compilation:**
In JIT compilation, TypeScript code is compiled to JavaScript in the browser at runtime. This means that the Angular application's source code is visible to developers because the TypeScript code is delivered to the browser and compiled there. This mode is primarily used during development as it provides faster iteration times, allowing developers to see changes immediately without the need for an extra build step.

**AOT (Ahead-of-Time) Compilation:**
In AOT compilation, the TypeScript code is compiled to JavaScript during the build process, before the application is deployed to the browser. This mode generates optimized and smaller JavaScript bundles, resulting in faster initial loading times and better performance for users. Since the code is compiled before deployment, the source code is not visible to users in the browser, providing a level of security through obfuscation.

So, in both JIT and AOT modes, TypeScript is compiled to JavaScript. The main difference is where and when the compilation occurs. In JIT, it happens in the browser at runtime, and in AOT, it happens during the build process before deployment. The AOT mode offers better performance and security, making it suitable for production environments.
    
    advantage of using typescript over javascript ???
    
    TypeScript offers several advantages over JavaScript, including:
    
Strong typing: TypeScript allows for the use of static types, 
which can help catch type errors during development, making code more predictable and less prone to runtime errors.

IntelliSense: TypeScript's static type system enables IDEs and editors to provide better code completion and suggestions, 
making it easier to write code quickly and accurately.

Class and interface: TypeScript has support for classes and interfaces, 
which can help with object-oriented programming and code organization.

Better scalability: TypeScript's features make it well-suited for large and complex projects, 
making it easier to maintain and scale the codebase over time.

if javascript have class why should I use typescript code .
JavaScript classes have some limitations compared to TypeScript classes. 
For example, JavaScript classes do not have private or protected members, 
which makes it difficult to properly encapsulate the implementation details of a class.
TypeScript classes, on the other hand, have support for private and protected members, 
which can help with code organization and maintainability.

TypeScript's static type system allows for more robust type checking and better code completion
and suggestions in IDEs and editors. This can help developers catch type errors during development
and make it easier to write and understand code.

TypeScript's interfaces provide a way to define a contract for an object's shape,
which can help with code organization and maintainability. JavaScript does not have a built-in way to define interfaces,
so developers have to use other techniques such as comments or TypeScript's interfaces to achieve similar functionality.



 
