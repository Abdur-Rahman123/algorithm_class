call vs apply vs bind

function myfun(c,d){
    console.log(this);
    console.log(this.a+this.b+c+d);
}
//one function share different object that time call,bind and apply will use.
//difference between call and apply: when argument pass call will pass argument by seperating "," and apply will call by array type[] .
// myfun.call({a:40,b:60},1,2);
// myfun.apply({a:100,b:200},[2,3]);
//bind will call when you have to bind something don't have to call now.this time you have to call bind.
let test=myfun.bind({a:10,b:30},40,50);
test();
//myfun();


///Explain this in javascript
Here are the different ways in which this can be used:

Global context: When this is used outside of any function or object, it refers to the global object. 
In a browser environment, the global object is window.

Function context: When this is used inside a function, its value is determined by how the function is called. 
If the function is called as a method of an object, this refers to the object. 
If the function is called without an explicit context, 
this refers to the global object.

Method context: When a function is called as a method of an object, this refers to the object itself.

Constructor context: When a function is used as a constructor with the new keyword, 
this refers to the newly created object.

Event context: When a function is used as an event handler, this refers to the element that triggered the event.

// Global context
console.log(this); // Output: Window

function myFunction() {
  // Function context
  console.log(this); // Output: Window
}

const myObject = {
  myMethod() {
    // Method context
    console.log(this); // Output: myObject
  }
};

function Person(name, age) {
  this.name = name;
  this.age = age;
}

const john = new Person('John', 30);
console.log(john); // Output: Person { name: 'John', age: 30 }

In the example above, Person is a constructor function that takes in two arguments, 
name and age. When we create a new object john using the new keyword and pass in the arguments 'John' and 30, this inside 
the constructor function refers to the newly created john object.

const myElement = document.getElementById('myElement');
myElement.addEventListener('click', function() {
  // Event context
  console.log(this); // Output: myElement
});
